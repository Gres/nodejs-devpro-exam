{
  "swagger": "2.0",
  "info": {
    "version": "0.1.0",
    "title": "Scrapper service API",
    "contact": {
      "name": "Kamaltynov Sergey",
      "url": "https://github.com/frontend-science/nodejs-dev-pro/tree/master/lesson8"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/swagger": {
      "x-swagger-pipe": "swagger_raw"
    },

    "/api/search/": {
      "x-swagger-router-controller": "search",
      "get": {
        "operationId": "getAction",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Scrapper api"
        ],
        "summary": "Scrap defined elements from url with level",
        "parameters": [
          { "$ref": "#/parameters/url" },
          { "$ref": "#/parameters/level" },
          { "$ref": "#/parameters/element" }
        ],
        "responses": {
          "200": {
            "description": "Success upload",
            "schema": {
              "$ref": "#/definitions/UploadResponse"
            }
          },
          "400": {
            "description": "Bad Request if any of mandatory parameters are missing in the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error (e.g. Redis is not available)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAction",
        "produces": [
          "application/json"
        ],
        "tags": [
          "File sync operations"
        ],
        "summary": "Delete cache if exist",
        "parameters": [
          { "$ref": "#/parameters/url" },
          { "$ref": "#/parameters/level" },
          { "$ref": "#/parameters/element" }
        ],
        "responses": {
          "200": {
            "description": "Site succesfully scrapped",
            "schema": {
              "$ref": "#/definitions/UploadResponse"
            }
          },
          "400": {
            "description": "Bad Request if any of mandatory parameters are missing in the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error (e.g. Redis is not available)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/search/list": {
      "x-swagger-router-controller": "list",
      "get": {
        "operationId": "getAction",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Scrapper api"
        ],
        "summary": "Show history",

        "responses": {
          "200": {
            "description": "Success upload",
            "schema": {
              "$ref": "#/definitions/UploadResponse"
            }
          },
          "400": {
            "description": "Bad Request if any of mandatory parameters are missing in the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error (e.g. Redis is not available)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }

    }
  },
  "definitions": {
    "UploadResponse": {
      "type": "object",
      "required": [
        "duplicate"
      ],
      "properties": {
        "duplicate": {
          "type": "boolean",
          "description": "Indicates if the file was already synced"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message explaining the reason of error"
        }
      }
    }
  },
  "parameters": {
    "url": {
      "name": "url",
      "in": "query",
      "description": "Start url",
      "required": true,
      "type": "string"
    },
    "level": {
      "name": "level",
      "in": "query",
      "description": "level",
      "required": true,
      "type": "integer"
    },
    "element": {
      "name": "element",
      "in": "query",
      "required": true,
      "description": "element",
      "type": "string"
    }
  }
}
